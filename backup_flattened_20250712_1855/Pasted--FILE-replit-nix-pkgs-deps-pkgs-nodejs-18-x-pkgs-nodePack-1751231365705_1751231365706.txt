===== FILE: replit.nix =====
{ pkgs }: {
    deps = [
        pkgs.nodejs-18_x
        pkgs.nodePackages.pnpm
        pkgs.wget
        pkgs.vim
    ];
}

===== FILE: package.json =====
{
  "name": "dashinfluence",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "framer-motion": "^11.13.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.4.0",
    "recharts": "^2.15.2",
    "wouter": "^3.3.5"
  },
  "devDependencies": {
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.17",
    "vite": "^5.4.19"
  }
}

===== FILE: vite.config.js =====
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000
  }
})

===== FILE: tailwind.config.js =====
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'brand-blue': '#2039b5',
        'brand-orange': '#fdb63a',
        'brand-white': '#ffffff',
      },
      animation: {
        'dash-pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite'
      }
    },
  },
  plugins: [],
}

===== FILE: postcss.config.js =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

===== FILE: index.html =====
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DashInfluence - AI Automation Agency</title>
    <meta name="description" content="Stop losing revenue to manual work. DashInfluence provides AI automation that books appointments while you sleep.">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

===== FILE: src/index.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: 'Inter', sans-serif;
  background-color: #ffffff;
  color: #2039b5;
}

@keyframes dash-pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.dash-underline {
  position: relative;
}

.dash-underline::after {
  content: '';
  position: absolute;
  bottom: -4px;
  left: 0;
  width: 0;
  height: 2px;
  background-color: #fdb63a;
  transition: width 0.3s ease;
}

.dash-underline:hover::after {
  width: 100%;
}

===== FILE: src/main.jsx =====
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

===== FILE: src/App.jsx =====
import { Switch, Route } from 'wouter'
import Navigation from './components/Navigation'
import Footer from './components/Footer'
import Home from './pages/Home'
import RevenueCalculator from './pages/RevenueCalculator'
import AutomationQuiz from './pages/AutomationQuiz'
import WorkflowMapper from './pages/WorkflowMapper'
import WhyDashInfluence from './pages/WhyDashInfluence'
import NotFound from './pages/NotFound'

export default function App() {
  return (
    <div className="min-h-screen flex flex-col bg-brand-white">
      <Navigation />
      <main className="flex-grow">
        <Switch>
          <Route path="/" component={Home} />
          <Route path="/calculator" component={RevenueCalculator} />
          <Route path="/quiz" component={AutomationQuiz} />
          <Route path="/mapper" component={WorkflowMapper} />
          <Route path="/why-us" component={WhyDashInfluence} />
          <Route component={NotFound} />
        </Switch>
      </main>
      <Footer />
    </div>
  )
}

===== FILE: src/components/Navigation.jsx =====
import { Link } from 'wouter'
import { motion } from 'framer-motion'

export default function Navigation() {
  const navItems = [
    { path: "/", label: "Home" },
    { path: "/calculator", label: "Revenue Calculator" },
    { path: "/quiz", label: "Automation Quiz" },
    { path: "/mapper", label: "Workflow Mapper" },
    { path: "/why-us", label: "Why DashInfluence" },
  ]

  return (
    <nav className="bg-white shadow-sm py-4">
      <div className="max-w-6xl mx-auto px-4 flex justify-between items-center">
        <div className="flex items-center">
          <div className="text-2xl font-bold mr-10">
            <span className="text-brand-blue">Dash</span>
            <motion.span 
              className="text-brand-orange"
              animate={{ opacity: [0.7, 1, 0.7] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              Influence
            </motion.span>
          </div>
          
          <div className="hidden md:flex space-x-8">
            {navItems.map((item) => (
              <Link key={item.path} href={item.path}>
                <a className="relative font-medium dash-underline">
                  {item.label}
                </a>
              </Link>
            ))}
          </div>
        </div>
        
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="px-4 py-2 bg-brand-orange text-white rounded-lg font-medium"
        >
          Get Started
        </motion.button>
      </div>
    </nav>
  )
}

===== FILE: src/components/Footer.jsx =====
import { motion } from 'framer-motion'

export default function Footer() {
  return (
    <footer className="bg-brand-blue text-white py-8">
      <div className="max-w-6xl mx-auto px-4">
        <div className="flex flex-col md:flex-row justify-between items-center">
          <div className="mb-4 md:mb-0">
            <div className="text-xl font-bold">
              <span>Dash</span>
              <motion.span 
                className="text-brand-orange"
                animate={{ opacity: [0.7, 1, 0.7] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                Influence
              </motion.span>
            </div>
            <p className="mt-2 text-sm">AI Automation That Moves Business Forward</p>
          </div>
          
          <div className="flex space-x-6">
            {['Privacy Policy', 'Terms of Service', 'Contact'].map((item) => (
              <motion.a 
                key={item}
                href="#"
                className="text-sm hover:text-brand-orange transition-colors"
                whileHover={{ scale: 1.05 }}
              >
                {item}
              </motion.a>
            ))}
          </div>
        </div>
        
        <motion.div 
          className="mt-8 pt-4 border-t border-white/20 text-center text-sm"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
        >
          Â© {new Date().getFullYear()} DashInfluence. All rights reserved.
        </motion.div>
      </div>
    </footer>
  )
}

===== FILE: src/pages/Home.jsx =====
import { motion } from 'framer-motion'
import { Link } from 'wouter'
import { FiArrowRight, FiBarChart2, FiClipboard, FiLayout } from 'react-icons/fi'

export default function Home() {
  return (
    <div className="max-w-6xl mx-auto px-4 py-12">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-16"
      >
        <h1 className="text-4xl md:text-6xl font-bold mb-4">
          Stop Losing Revenue to <br />
          <motion.span 
            className="text-brand-orange"
            animate={{ opacity: [0.8, 1, 0.8] }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            Manual Work
          </motion.span>
        </h1>
        <p className="text-xl max-w-2xl mx-auto mb-8">
          AI automation that books appointments while you sleep. Focus on growth while we handle the operations.
        </p>
        
        <motion.div
          whileHover={{ scale: 1.02 }}
          className="inline-block"
        >
          <Link href="/calculator">
            <button className="px-8 py-3 bg-brand-orange text-white rounded-lg font-bold text-lg">
              Calculate Your Losses
            </button>
          </Link>
        </motion.div>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
        {[
          {
            icon: <FiBarChart2 className="text-4xl mb-4 text-brand-orange" />,
            title: "Revenue Calculator",
            description: "Discover how much revenue leaks from slow processes",
            link: "/calculator"
          },
          {
            icon: <FiClipboard className="text-4xl mb-4 text-brand-orange" />,
            title: "Automation Quiz",
            description: "Measure your automation readiness in 2 minutes",
            link: "/quiz"
          },
          {
            icon: <FiLayout className="text-4xl mb-4 text-brand-orange" />,
            title: "Workflow Mapper",
            description: "Visualize where automation transforms your business",
            link: "/mapper"
          }
        ].map((tool, index) => (
          <motion.div
            key={tool.title}
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.2 }}
            className="bg-white p-6 rounded-xl shadow-lg border border-gray-100 hover:shadow-xl transition-shadow"
          >
            <div className="text-center">
              {tool.icon}
              <h3 className="text-xl font-bold mb-2">{tool.title}</h3>
              <p className="mb-4">{tool.description}</p>
              <Link href={tool.link}>
                <button className="flex items-center justify-center mx-auto text-brand-orange font-medium">
                  Try it now <FiArrowRight className="ml-2" />
                </button>
              </Link>
            </div>
          </motion.div>
        ))}
      </div>

      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.8 }}
        className="bg-brand-blue text-white rounded-xl p-8 text-center"
      >
        <h2 className="text-2xl font-bold mb-4">Ready to Transform Your Business?</h2>
        <p className="max-w-2xl mx-auto mb-6">
          Join 70+ real estate professionals who automate their operations with DashInfluence
        </p>
        <button className="px-6 py-3 bg-brand-orange text-white rounded-lg font-bold">
          Book Free Consultation
        </button>
      </motion.div>
    </div>
  )
}

===== FILE: src/pages/RevenueCalculator.jsx =====
import { useState, useEffect } from 'react'
import { BarChart, Bar, XAxis, YAxis, ResponsiveContainer } from 'recharts'
import { motion } from 'framer-motion'

export default function RevenueCalculator() {
  const [values, setValues] = useState({
    leads: 100,
    conversion: 10,
    dealSize: 2000,
    hours: 20,
    hourlyCost: 50
  })

  const calculateRevenue = () => {
    const currentRevenue = values.leads * (values.conversion / 100) * values.dealSize
    const laborCost = values.hours * values.hourlyCost * 4
    const potentialConversion = Math.min(values.conversion * 1.5, 35)
    const potentialRevenue = values.leads * (potentialConversion / 100) * values.dealSize
    
    return {
      current: currentRevenue - laborCost,
      potential: potentialRevenue - (laborCost * 0.3),
      leakage: currentRevenue - potentialRevenue + laborCost
    }
  }

  const { current, potential, leakage } = calculateRevenue()
  const chartData = [
    { name: "Current", value: current },
    { name: "Potential", value: potential }
  ]

  return (
    <div className="max-w-6xl mx-auto p-6">
      <h1 className="text-4xl font-bold mb-2">
        Your Revenue Leakage Calculator
        <div className="w-24 h-1 bg-brand-orange mt-2"></div>
      </h1>
      <p className="text-lg mb-8">
        Discover how much revenue slips through manual processes
      </p>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="space-y-6">
          {Object.entries(values).map(([key, value]) => (
            <div key={key}>
              <label className="block mb-2 capitalize">
                {key.replace(/([A-Z])/g, ' $1')}:
                <span className="ml-2 font-bold">
                  {key === 'conversion' ? `${value}%` : 
                   key === 'dealSize' || key === 'hourlyCost' ? `$${value}` : 
                   key === 'hours' ? `${value} hrs/week` : value}
                </span>
              </label>
              <input
                type="range"
                min={key === 'conversion' ? 1 : key === 'leads' ? 10 : 1}
                max={key === 'conversion' ? 35 : key === 'leads' ? 5000 : 500}
                value={value}
                onChange={(e) => setValues({...values, [key]: Number(e.target.value)})}
                className="w-full accent-brand-orange"
              />
            </div>
          ))}
        </div>

        <div className="bg-white p-6 rounded-lg shadow-lg">
          <h2 className="text-2xl font-bold mb-4 text-center">
            Revenue Impact
            <div className="w-16 h-1 bg-brand-orange mx-auto mt-2"></div>
          </h2>
          
          <div className="h-64 mb-6">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={chartData}>
                <XAxis dataKey="name" />
                <YAxis />
                <Bar 
                  dataKey="value" 
                  fill="#2039b5" 
                  animationBegin={100}
                  animationDuration={1500}
                >
                  {chartData.map((entry, index) => (
                    <text 
                      key={`label-${index}`} 
                      x={index === 0 ? 50 : 250} 
                      y={20} 
                      textAnchor="middle"
                      fill="#fdb63a"
                      fontWeight="bold"
                    >
                      ${Math.round(entry.value / 1000)}k
                    </text>
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </div>

          <div className="text-center p-4 bg-orange-50 rounded-lg">
            <h3 className="text-xl font-bold mb-2 text-brand-orange">
              Monthly Revenue Leakage
            </h3>
            <motion.div
              key={leakage}
              initial={{ scale: 1.2, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              className="text-3xl font-bold"
            >
              ${Math.round(leakage / 1000)}k
            </motion.div>
            <p className="mt-2">
              You're losing <span className="text-brand-orange font-bold">
                ${Math.round(leakage * 12 / 10000)}k/year
              </span>
            </p>
          </div>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="w-full mt-6 py-3 bg-brand-orange text-white rounded-lg font-bold"
          >
            Get Your Custom Recovery Plan
          </motion.button>
        </div>
      </div>
    </div>
  )
}

===== FILE: src/pages/AutomationQuiz.jsx =====
import { useState } from 'react'
import { motion } from 'framer-motion'

const questions = [
  {
    id: 1,
    text: "How many hours/week does your team spend on manual follow-ups?",
    options: [
      { value: 5, label: "< 10 hours" },
      { value: 15, label: "10-20 hours" },
      { value: 25, label: "20-30 hours" },
      { value: 35, label: "> 30 hours" }
    ]
  },
  {
    id: 2,
    text: "What's your average response time to new leads?",
    options: [
      { value: 5, label: "Within minutes" },
      { value: 15, label: "1-4 hours" },
      { value: 25, label: "4-12 hours" },
      { value: 35, label: "> 12 hours" }
    ]
  },
  {
    id: 3,
    text: "How are appointments currently scheduled?",
    options: [
      { value: 10, label: "Fully automated" },
      { value: 20, label: "Partially automated" },
      { value: 30, label: "Manual coordination" },
      { value: 40, label: "No system in place" }
    ]
  }
]

export default function AutomationQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [score, setScore] = useState(0)
  const [showResults, setShowResults] = useState(false)

  const handleAnswer = (value) => {
    setScore(score + value)
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
    } else {
      setShowResults(true)
    }
  }

  const calculateScore = () => {
    const maxScore = questions.reduce((sum, q) => 
      Math.max(...q.options.map(o => o.value)) + sum, 0)
    return Math.min(Math.round((score / maxScore) * 100), 95)
  }

  const getPriority = () => {
    const quizScore = calculateScore()
    if (quizScore > 75) return "High Implementation"
    if (quizScore > 50) return "Moderate Implementation"
    return "Urgent Implementation"
  }

  if (showResults) {
    return (
      <div className="max-w-4xl mx-auto p-6 text-center">
        <h1 className="text-4xl font-bold mb-8">
          Your Automation Potential
          <div className="w-24 h-1 bg-brand-orange mx-auto mt-2"></div>
        </h1>
        
        <div className="relative w-64 h-64 mx-auto mb-8">
          <div className="absolute inset-0 rounded-full border-8 border-gray-200"></div>
          <motion.div 
            className="absolute inset-0 rounded-full border-8 border-brand-orange"
            style={{ 
              clipPath: `inset(0 ${100 - calculateScore()}% 0 0)` 
            }}
            initial={{ clipPath: "inset(0 100% 0 0)" }}
            animate={{ clipPath: `inset(0 ${100 - calculateScore()}% 0 0)` }}
            transition={{ duration: 1.5 }}
          ></motion.div>
          <div className="absolute inset-0 flex flex-col items-center justify-center">
            <span className="text-5xl font-bold text-brand-orange">
              {calculateScore()}%
            </span>
            <span className="text-lg">Automation Potential</span>
          </div>
        </div>

        <div className="bg-orange-50 p-6 rounded-lg mb-8">
          <h2 className="text-2xl font-bold mb-4 text-brand-orange">
            {getPriority()}
          </h2>
          <div className="w-48 h-1 bg-brand-orange mx-auto mb-4"></div>
          <p className="mt-4 text-lg">
            Based on your responses, we recommend focusing on:
          </p>
          <ul className="mt-4 space-y-2 text-left max-w-md mx-auto">
            <li className="flex items-center">
              <span className="w-6 h-6 rounded-full bg-brand-orange flex items-center justify-center text-white mr-2">1</span>
              Lead response automation
            </li>
            <li className="flex items-center">
              <span className="w-6 h-6 rounded-full bg-brand-orange flex items-center justify-center text-white mr-2">2</span>
              Appointment scheduling
            </li>
            <li className="flex items-center">
              <span className="w-6 h-6 rounded-full bg-brand-orange flex items-center justify-center text-white mr-2">3</span>
              Follow-up sequences
            </li>
          </ul>
        </div>

        <motion.button 
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="mt-6 px-8 py-3 bg-brand-orange text-white rounded-lg font-bold"
          onClick={() => {
            setCurrentQuestion(0)
            setScore(0)
            setShowResults(false)
          }}
        >
          Retake Quiz
        </motion.button>
      </div>
    )
  }

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-4xl font-bold mb-2">
        Automation Potential Assessment
        <div className="w-24 h-1 bg-brand-orange mt-2"></div>
      </h1>
      <p className="text-lg mb-8">
        Discover your AI readiness in 2 minutes
      </p>

      <div className="bg-white p-6 rounded-lg shadow-lg">
        <div className="mb-6">
          <div className="flex justify-between mb-2">
            <span>Progress</span>
            <span>{currentQuestion + 1}/{questions.length}</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <motion.div 
              className="bg-brand-orange h-2 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
              transition={{ duration: 0.5 }}
            ></motion.div>
          </div>
        </div>

        <h2 className="text-2xl font-bold mb-6">
          {questions[currentQuestion].text}
        </h2>

        <div className="space-y-4">
          {questions[currentQuestion].options.map((option, index) => (
            <motion.button
              key={index}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="w-full text-left p-4 border rounded-lg hover:bg-orange-50 hover:border-brand-orange transition"
              onClick={() => handleAnswer(option.value)}
            >
              {option.label}
            </motion.button>
          ))}
        </div>
      </div>
    </div>
  )
}

===== FILE: src/pages/WorkflowMapper.jsx =====
import { useState } from 'react'
import { motion } from 'framer-motion'

const workflowComponents = [
  { id: 1, name: "Lead Capture", emoji: "ð¥" },
  { id: 2, name: "Initial Response", emoji: "ð¤" },
  { id: 3, name: "Qualification", emoji: "ð" },
  { id: 4, name: "Appointment", emoji: "ð" },
  { id: 5, name: "Follow-up", emoji: "ð" },
  { id: 6, name: "Conversion", emoji: "ð°" }
]

export default function WorkflowMapper() {
  const [workflow, setWorkflow] = useState([1, 2, 3, 4, 5, 6])
  const [painPoints, setPainPoints] = useState({})
  const [showOptimized, setShowOptimized] = useState(false)

  const toggleComponent = (id) => {
    if (workflow.includes(id)) {
      setWorkflow(workflow.filter(compId => compId !== id))
      const newPainPoints = {...painPoints}
      delete newPainPoints[id]
      setPainPoints(newPainPoints)
    } else {
      setWorkflow([...workflow, id])
    }
  }

  const setPainPoint = (id, emoji) => {
    setPainPoints({...painPoints, [id]: emoji})
  }

  const calculateSavings = () => {
    const painPointCount = Object.keys(painPoints).length
    return painPointCount * 15
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      <h1 className="text-4xl font-bold mb-2">
        Process Optimization Mapper
        <div className="w-24 h-1 bg-brand-orange mt-2"></div>
      </h1>
      <p className="text-lg mb-8">
        Visualize where automation transforms your business
      </p>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
        <div>
          <h2 className="text-2xl font-bold mb-4">
            Your Current Workflow
          </h2>
          <div className="flex flex-wrap gap-4 mb-6">
            {workflowComponents.map(comp => (
              <button
                key={comp.id}
                className={`px-4 py-2 rounded-lg border ${
                  workflow.includes(comp.id)
                    ? "border-brand-orange bg-orange-50"
                    : "border-gray-300"
                }`}
                onClick={() => toggleComponent(comp.id)}
              >
                {comp.emoji} {comp.name}
              </button>
            ))}
          </div>

          <div className="bg-white p-6 rounded-lg shadow-lg">
            <div className="flex overflow-x-auto py-4 space-x-4 min-h-[120px]">
              {workflow.map((id, index) => {
                const comp = workflowComponents.find(c => c.id === id)
                return comp ? (
                  <motion.div
                    key={`${id}-${index}`}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex flex-col items-center"
                  >
                    <div className="relative">
                      <div className="w-16 h-16 rounded-full bg-white border-2 border-brand-orange flex items-center justify-center text-2xl">
                        {comp.emoji}
                      </div>
                      {painPoints[comp.id] && (
                        <motion.div
                          initial={{ scale: 0 }}
                          animate={{ scale: 1 }}
                          className="absolute -top-2 -right-2 w-8 h-8 rounded-full bg-red-500 flex items-center justify-center text-white"
                        >
                          {painPoints[comp.id]}
                        </motion.div>
                      )}
                    </div>
                    <div className="mt-2 text-sm">{comp.name}</div>
                    <div className="mt-2">
                      <button
                        className="text-xs text-brand-orange"
                        onClick={() => {
                          const emojis = ["ð©", "ð¸", "â³", "ð¤"]
                          const currentIndex = emojis.indexOf(painPoints[comp.id] || "")
                          const nextIndex = (currentIndex + 1) % emojis.length
                          setPainPoint(comp.id, emojis[nextIndex])
                        }}
                      >
                        {painPoints[comp.id] || "Mark pain point"}
                      </button>
                    </div>
                  </motion.div>
                ) : null
              })}
            </div>
          </div>
        </div>

        <div>
          <h2 className="text-2xl font-bold mb-4">
            Automated Workflow
          </h2>
          <div className="mb-4">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={showOptimized}
                onChange={() => setShowOptimized(!showOptimized)}
                className="mr-2 accent-brand-orange"
              />
              Show optimized workflow
            </label>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-lg">
            <div className="flex overflow-x-auto py-4 space-x-4 min-h-[120px]">
              {workflow.map((id, index) => {
                const comp = workflowComponents.find(c => c.id === id)
                return comp ? (
                  <motion.div
                    key={`opt-${id}-${index}`}
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex flex-col items-center"
                  >
                    <div className="w-16 h-16 rounded-full bg-white border-2 border-brand-blue flex items-center justify-center text-2xl">
                      {comp.emoji}
                    </div>
                    <div className="mt-2 text-sm">{comp.name}</div>
                    {showOptimized && painPoints[comp.id] && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="mt-2 text-xs text-green-600 font-bold"
                      >
                        AUTOMATED
                      </motion.div>
                    )}
                  </motion.div>
                ) : null
              })}
            </div>
            
            {showOptimized && (
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: "auto", opacity: 1 }}
                className="mt-6 p-4 bg-green-50 rounded-lg"
              >
                <h3 className="font-bold text-lg text-green-800">
                  Potential Savings
                </h3>
                <div className="text-2xl font-bold text-green-800 my-2">
                  {calculateSavings()} hours/month
                </div>
                <p>
                  Estimated revenue recovery: $
                  {calculateSavings() * 150}
                </p>
              </motion.div>
            )}
          </div>
        </div>
      </div>

      <div className="text-center">
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="px-8 py-3 bg-brand-orange text-white rounded-lg font-bold"
          onClick={() => setShowOptimized(true)}
        >
          Generate Optimization Plan
        </motion.button>
      </div>
    </div>
  )
}

===== FILE: src/pages/WhyDashInfluence.jsx =====
import { motion } from 'framer-motion'
import { FiCheck, FiZap, FiUser, FiClock, FiBarChart } from 'react-icons/fi'

export default function WhyDashInfluence() {
  return (
    <div className="max-w-6xl mx-auto px-4 py-12">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-12"
      >
        <h1 className="text-4xl font-bold mb-4">
          Why Businesses Choose <span className="text-brand-orange">DashInfluence</span>
        </h1>
        <p className="text-xl max-w-2xl mx-auto">
          We don't just automateâwe transform operations and drive real results.
        </p>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-16">
        <motion.div
          initial={{ opacity: 0, x: -30 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.2 }}
        >
          <h2 className="text-2xl font-bold mb-4">Our Differentiators</h2>
          <div className="space-y-6">
            {[
              {
                icon: <FiZap className="text-brand-orange text-xl" />,
                title: "Tailored Automation Systems",
                description: "We build specifically for your workflow, not generic templates"
              },
              {
                icon: <FiUser className="text-brand-orange text-xl" />,
                title: "Human + AI Synergy",
                description: "We make your people more powerful, not replace them"
              },
              {
                icon: <FiClock className="text-brand-orange text-xl" />,
                title: "Rapid Implementation",
                description: "Go from consultation to automation in 72 hours"
              },
              {
                icon: <FiBarChart className="text-brand-orange text-xl" />,
                title: "Results-Driven Approach",
                description: "We measure success by your business outcomes"
              }
            ].map((item, index) => (
              <div key={item.title} className="flex items-start">
                <div className="mt-1 mr-4">{item.icon}</div>
                <div>
                  <h3 className="text-lg font-bold mb-1">{item.title}</h3>
                  <p>{item.description}</p>
                </div>
              </div>
            ))}
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, x: 30 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.4 }}
          className="bg-brand-orange/10 p-6 rounded-xl"
        >
          <h2 className="text-2xl font-bold mb-4">Client Results Timeline</h2>
          <div className="space-y-4">
            {[
              { time: "Day 1", event: "System deployed" },
              { time: "Day 3", event: "First auto-booked appointment" },
              { time: "Day 7", event: "15 qualified leads generated" },
              { time: "Day 30", event: "$12,000 new revenue" }
            ].map((item, index) => (
              <motion.div 
                key={item.time}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 + index * 0.2 }}
                className="flex"
              >
                <div className="w-20 font-bold text-brand-orange">{item.time}</div>
                <div className="flex-1">
                  <div className="flex items-center">
                    <div className="w-4 h-4 rounded-full bg-brand-orange mr-3"></div>
                    <div>{item.event}</div>
                  </div>
                  {index < 3 && <div className="h-8 w-0.5 bg-brand-orange ml-1.5"></div>}
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </div>

      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.8 }}
        className="bg-brand-blue text-white rounded-xl p-8 text-center"
      >
        <h2 className="text-2xl font-bold mb-4">Join Our Growing Community</h2>
        <p className="max-w-2xl mx-auto mb-6">
          70+ businesses transformed. 92% client retention. 3x average ROI.
        </p>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="px-6 py-3 bg-brand-orange text-white rounded-lg font-bold"
        >
          Start Your Automation Journey
        </motion.button>
      </motion.div>
    </div>
  )
}

===== FILE: src/pages/NotFound.jsx =====
import { Link } from 'wouter'
import { FiArrowLeft } from 'react-icons/fi'

export default function NotFound() {
  return (
    <div className="max-w-2xl mx-auto px-4 py-20 text-center">
      <h1 className="text-8xl font-bold text-brand-orange mb-4">404</h1>
      <h2 className="text-3xl font-bold mb-6">Page Not Found</h2>
      <p className="text-xl mb-8">
        The page you're looking for doesn't exist or has been moved.
      </p>
      <Link href="/">
        <button className="px-6 py-3 bg-brand-blue text-white rounded-lg font-bold flex items-center justify-center mx-auto">
          <FiArrowLeft className="mr-2" /> Back to Home
        </button>
      </Link>
    </div>
  )
}